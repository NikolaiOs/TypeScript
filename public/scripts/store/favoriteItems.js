import { renderUserBlock, getUserData } from '../user.js';
import { HomyAPI } from '../API/homy-api.js';
import { FlatRentSdk } from '../SDK/flat-rent-sdk.js';
import { convertFlatRentToIPlace } from '../search-form.js';
function isEmptyObject(object) {
    return Object.keys(object).length === 0;
}
function getCleanIdAndSource(id, prefix, splitter) {
    const prefixLength = prefix.length;
    const result = id.slice(prefixLength).split(splitter);
    if (result.length === 2) {
        return {
            source: result[0],
            id: result[1],
        };
    }
    return;
}
export function isIFavoriteItem(object) {
    if (object != null && typeof object === 'object') {
        return 'id' in object && 'name' in object && 'image' in object;
    }
    return false;
}
export function isIFavoriteItemsStore(object) {
    if (isEmptyObject(object))
        return true;
    if (object != null && typeof object === 'object') {
        const keys = Object.keys(object);
        for (const key of keys) {
            if (!isIFavoriteItem(object[key]))
                return false;
        }
        return true;
    }
    return false;
}
export function getFavoritesItems() {
    const key = 'favoriteItems';
    const storageValue = localStorage.getItem(key);
    if (storageValue == null)
        return;
    const favoriteItems = JSON.parse(storageValue);
    if (isIFavoriteItemsStore(favoriteItems))
        return favoriteItems;
}
export function getFavoritesItemsCount() {
    const key = 'favoriteItems';
    const storageValue = localStorage.getItem(key);
    if (storageValue == null)
        return;
    const favoriteItems = JSON.parse(storageValue);
    if (isIFavoriteItemsStore(favoriteItems)) {
        return Object.keys(favoriteItems).length;
    }
}
export async function addFavoriteItem(targetId, store, sources) {
    try {
        const key = 'favoriteItems';
        const idPrefix = 'toggle-';
        const { source: sourceName, id: placeId } = getCleanIdAndSource(targetId, idPrefix, '_');
        if (sourceName == null || placeId == null) {
            throw new Error(`Invalid id: ${targetId}`);
        }
        const { api } = sources.find((source) => source.name === sourceName);
        let place;
        if (api instanceof HomyAPI) {
            const response = await api.get(placeId);
            if (response instanceof Error)
                throw response;
            place = response;
        }
        if (api instanceof FlatRentSdk) {
            const response = await api.get(placeId);
            if (response instanceof Error)
                throw response;
            const convertedData = convertFlatRentToIPlace(response);
            if (Array.isArray(convertedData))
                return;
            place = convertedData;
        }
        store[targetId] = {
            id: place.id,
            name: place.name,
            image: place.image,
        };
        localStorage.setItem(key, JSON.stringify(store));
    }
    catch (error) {
        console.error(error.message);
    }
}
export function removeFavoriteItem(targetId, store) {
    const key = 'favoriteItems';
    delete store[targetId];
    localStorage.setItem(key, JSON.stringify(store));
}
export function isFavoriteItem(id) {
    const store = getFavoritesItems();
    if (store[id] != null)
        return true;
    return false;
}
export function getFavoritesItemsAmount() {
    const key = 'favoritesAmount';
    const storageValue = localStorage.getItem(key);
    const favoriteAmount = storageValue != null && JSON.parse(storageValue);
    if (typeof favoriteAmount === 'number' && !isNaN(favoriteAmount))
        return favoriteAmount;
}
export function updateFavoritesItemsAmount() {
    const keyAmount = 'favoritesAmount';
    const favoriteItemsCount = getFavoritesItemsCount();
    const { username, avatarUrl } = getUserData();
    localStorage.setItem(keyAmount, JSON.stringify(favoriteItemsCount));
    renderUserBlock(username, avatarUrl, favoriteItemsCount);
}
//# sourceMappingURL=data:application/json;base64,