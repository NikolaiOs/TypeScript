import { Params, isIPlace, isIPlaceArray } from '../place.js';
export class HomyAPI {
    constructor() {
        this._API_URL = 'http://localhost:3030';
        this._PLACES = '/place';
    }
    _getUrlPlaceWithParams(params) {
        return `${this._API_URL}${this._PLACES}${params.queryString}`;
    }
    _getUrlPlaceById(id, params) {
        return `${this._API_URL}${this._PLACES}/${id}${params != null ? params.queryString : ''}`;
    }
    _checkResponse(response) {
        if (!response.ok)
            throw new Error(`Something went wrong. Response status:${response.status}`);
    }
    _addSource(data) {
        const source = 'Homy-API';
        if (Array.isArray(data)) {
            data.forEach((item) => (item.source = source));
        }
        else {
            data.source = source;
        }
    }
    async get(id) {
        try {
            const response = await fetch(this._getUrlPlaceById(id));
            this._checkResponse(response);
            const data = await response.json();
            if (!isIPlace(data)) {
                return new Error(`Type is not Place. Received data: ${data}`);
            }
            this._addSource(data);
            return data;
        }
        catch (error) {
            console.error(error);
        }
    }
    async search(parameters) {
        try {
            const params = new Params();
            Object.keys(parameters).forEach((key) => params.set(key, parameters[key]));
            const response = await fetch(this._getUrlPlaceWithParams(params));
            this._checkResponse(response);
            const data = await response.json();
            if (!isIPlaceArray(data)) {
                return new Error(`Type is not Place. Received data: ${data}`);
            }
            this._addSource(data);
            return data;
        }
        catch (error) {
            console.error(error);
        }
    }
    async book(id, checkInDate, checkOutDate) {
        try {
            const params = new Params();
            params.set('checkInDate', checkInDate);
            params.set('checkOutDate', checkOutDate);
            const response = await fetch(this._getUrlPlaceById(id, params), {
                method: 'PATCH',
            });
            this._checkResponse(response);
            const data = await response.json();
            if (!isIPlace(data)) {
                return new Error(`Type is not Place. Received data: ${data}`);
            }
            this._addSource(data);
            return data;
        }
        catch (error) {
            console.log(error);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9teS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvQVBJL2hvbXktYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQVUsUUFBUSxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQVdyRSxNQUFNLE9BQU8sT0FBTztJQUFwQjtRQUNFLGFBQVEsR0FBRyx1QkFBdUIsQ0FBQTtRQUNsQyxZQUFPLEdBQUcsUUFBUSxDQUFBO0lBNkdwQixDQUFDO0lBM0dTLHNCQUFzQixDQUM1QixNQUFnRDtRQUVoRCxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMvRCxDQUFDO0lBRU8sZ0JBQWdCLENBQ3RCLEVBQVUsRUFDVixNQUFpRDtRQUVqRCxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsR0FDMUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFDeEMsRUFBRSxDQUFBO0lBQ0osQ0FBQztJQUVPLGNBQWMsQ0FBQyxRQUFrQjtRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUNiLHlDQUF5QyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQzNELENBQUE7SUFDTCxDQUFDO0lBRU8sVUFBVSxDQUFDLElBQXVCO1FBQ3hDLE1BQU0sTUFBTSxHQUFrQixVQUFVLENBQUE7UUFFeEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFBO1NBQy9DO2FB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Q0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyYW1zLCBJUGxhY2UsIGlzSVBsYWNlLCBpc0lQbGFjZUFycmF5IH0gZnJvbSAnLi4vcGxhY2UuanMnXG5cbmV4cG9ydCB0eXBlIFNvdXJjZUhvbXlBUEkgPSAnSG9teS1BUEknXG5cbmV4cG9ydCBpbnRlcmZhY2UgSG9teUFQSVNlYXJjaFBhcmFtZXRlcnMge1xuICBjb29yZGluYXRlczogc3RyaW5nXG4gIGNoZWNrSW5EYXRlOiBudW1iZXJcbiAgY2hlY2tPdXREYXRlOiBudW1iZXJcbiAgbWF4UHJpY2U/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNsYXNzIEhvbXlBUEkge1xuICBfQVBJX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMzAnXG4gIF9QTEFDRVMgPSAnL3BsYWNlJ1xuXG4gIHByaXZhdGUgX2dldFVybFBsYWNlV2l0aFBhcmFtcyhcbiAgICBwYXJhbXM6IFBhcmFtczxudW1iZXIgfCBzdHJpbmcsIG51bWJlciB8IHN0cmluZz5cbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5fQVBJX1VSTH0ke3RoaXMuX1BMQUNFU30ke3BhcmFtcy5xdWVyeVN0cmluZ31gXG4gIH1cblxuICBwcml2YXRlIF9nZXRVcmxQbGFjZUJ5SWQoXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwYXJhbXM/OiBQYXJhbXM8bnVtYmVyIHwgc3RyaW5nLCBudW1iZXIgfCBzdHJpbmc+XG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuX0FQSV9VUkx9JHt0aGlzLl9QTEFDRVN9LyR7aWR9JHtcbiAgICAgIHBhcmFtcyAhPSBudWxsID8gcGFyYW1zLnF1ZXJ5U3RyaW5nIDogJydcbiAgICB9YFxuICB9XG5cbiAgcHJpdmF0ZSBfY2hlY2tSZXNwb25zZShyZXNwb25zZTogUmVzcG9uc2UpOiB2b2lkIHtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgU29tZXRoaW5nIHdlbnQgd3JvbmcuIFJlc3BvbnNlIHN0YXR1czoke3Jlc3BvbnNlLnN0YXR1c31gXG4gICAgICApXG4gIH1cblxuICBwcml2YXRlIF9hZGRTb3VyY2UoZGF0YTogSVBsYWNlIHwgSVBsYWNlW10pOiB2b2lkIHtcbiAgICBjb25zdCBzb3VyY2U6IFNvdXJjZUhvbXlBUEkgPSAnSG9teS1BUEknXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgZGF0YS5mb3JFYWNoKChpdGVtKSA9PiAoaXRlbS5zb3VyY2UgPSBzb3VyY2UpKVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnNvdXJjZSA9IHNvdXJjZVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxJUGxhY2UgfCBFcnJvcj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuX2dldFVybFBsYWNlQnlJZChpZCkpXG5cbiAgICAgIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgICAgaWYgKCFpc0lQbGFjZShkYXRhKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGBUeXBlIGlzIG5vdCBQbGFjZS4gUmVjZWl2ZWQgZGF0YTogJHtkYXRhfWApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FkZFNvdXJjZShkYXRhKVxuXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlYXJjaChwYXJhbWV0ZXJzOiBIb215QVBJU2VhcmNoUGFyYW1ldGVycyk6IFByb21pc2U8SVBsYWNlW10gfCBFcnJvcj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgUGFyYW1zKClcblxuICAgICAgT2JqZWN0LmtleXMocGFyYW1ldGVycykuZm9yRWFjaCgoa2V5KSA9PlxuICAgICAgICBwYXJhbXMuc2V0KGtleSwgcGFyYW1ldGVyc1trZXldKVxuICAgICAgKVxuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuX2dldFVybFBsYWNlV2l0aFBhcmFtcyhwYXJhbXMpKVxuXG4gICAgICB0aGlzLl9jaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICAgIGlmICghaXNJUGxhY2VBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGBUeXBlIGlzIG5vdCBQbGFjZS4gUmVjZWl2ZWQgZGF0YTogJHtkYXRhfWApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FkZFNvdXJjZShkYXRhKVxuXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGJvb2soXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjaGVja0luRGF0ZTogbnVtYmVyLFxuICAgIGNoZWNrT3V0RGF0ZTogbnVtYmVyXG4gICk6IFByb21pc2U8SVBsYWNlIHwgRXJyb3I+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFBhcmFtcygpXG5cbiAgICAgIHBhcmFtcy5zZXQoJ2NoZWNrSW5EYXRlJywgY2hlY2tJbkRhdGUpXG4gICAgICBwYXJhbXMuc2V0KCdjaGVja091dERhdGUnLCBjaGVja091dERhdGUpXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuX2dldFVybFBsYWNlQnlJZChpZCwgcGFyYW1zKSwge1xuICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICB9KVxuXG4gICAgICB0aGlzLl9jaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICAgIGlmICghaXNJUGxhY2UoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgVHlwZSBpcyBub3QgUGxhY2UuIFJlY2VpdmVkIGRhdGE6ICR7ZGF0YX1gKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9hZGRTb3VyY2UoZGF0YSlcblxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgfVxuICB9XG59XG4iXX0=