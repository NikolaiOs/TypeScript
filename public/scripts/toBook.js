import { HomyAPI } from './API/homy-api.js';
import { renderToast } from './lib.js';
import { FlatRentSdk } from './SDK/flat-rent-sdk.js';
import { getSearchFormData } from './search-form.js';
export async function toBook(event, sources) {
    try {
        const target = event.target;
        if (!(target instanceof Element))
            return;
        const targetId = target.id;
        const prefixId = 'to-book-';
        const { source: sourceName, id: placeId } = getCleanIdAndSource(targetId, prefixId, '_');
        if (sourceName == null || placeId == null) {
            throw new Error(`Invalid id: ${targetId}`);
        }
        const fromId = 'search-form';
        const { checkIn, checkOut } = getSearchFormData(fromId);
        const { api } = sources.find((source) => source.name === sourceName);
        if (api instanceof HomyAPI) {
            const result = await api.book(placeId, checkIn, checkOut);
            if (result instanceof Error)
                throw result;
        }
        if (api instanceof FlatRentSdk) {
            const result = await api.book(placeId, new Date(checkIn), new Date(checkOut));
            if (result instanceof Error)
                throw result;
        }
        renderToast({
            text: 'Бронирование прошло успешно.',
            type: 'success',
        }, {
            name: 'Ok',
            handler: () => {
                console.log('Уведомление закрыто');
            },
        });
    }
    catch (error) {
        console.error(error.message);
        renderToast({
            text: 'Произошла ошибка при бронировании.',
            type: 'error',
        }, {
            name: 'Ok',
            handler: () => {
                console.log('Уведомление закрыто');
            },
        });
    }
}
export function getCleanIdAndSource(id, prefix, splitter) {
    const prefixLength = prefix.length;
    const result = id.slice(prefixLength).split(splitter);
    if (result.length === 2) {
        return {
            source: result[0],
            id: result[1],
        };
    }
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9Cb29rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RvQm9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFJcEQsTUFBTSxDQUFDLEtBQUssVUFBVSxNQUFNLENBQUMsS0FBWSxFQUFFLE9BQWtCO0lBQzNELElBQUk7UUFFRixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO1FBRTNCLElBQUksQ0FBQyxDQUFDLE1BQU0sWUFBWSxPQUFPLENBQUM7WUFBRSxPQUFNO1FBRXhDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUE7UUFDMUIsTUFBTSxRQUFRLEdBQW1CLFVBQVUsQ0FBQTtRQUUzQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUV4RixJQUFJLFVBQVUsSUFBSSxJQUFJLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtZQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsUUFBUSxFQUFFLENBQUMsQ0FBQTtTQUMzQztRQUVELE1BQU0sTUFBTSxHQUFpQixhQUFhLENBQUE7UUFDMUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV2RCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQTtRQUVwRSxJQUFJLEdBQUcsWUFBWSxPQUFPLEVBQUU7WUFFMUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7WUFFekQsSUFBSSxNQUFNLFlBQVksS0FBSztnQkFBRSxNQUFNLE1BQU0sQ0FBQTtTQUMxQztRQUVELElBQUksR0FBRyxZQUFZLFdBQVcsRUFBRTtZQUU5QixNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQzNCLE9BQU8sRUFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDakIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ25CLENBQUE7WUFFRCxJQUFJLE1BQU0sWUFBWSxLQUFLO2dCQUFFLE1BQU0sTUFBTSxDQUFBO1NBQzFDO1FBRUQsV0FBVyxDQUNUO1lBQ0UsSUFBSSxFQUFFLDhCQUE4QjtZQUNwQyxJQUFJLEVBQUUsU0FBUztTQUNoQixFQUNEO1lBQ0UsSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQTtZQUNwQyxDQUFDO1NBQ0YsQ0FDRixDQUFBO0tBQ0Y7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTVCLFdBQVcsQ0FDVDtZQUNFLElBQUksRUFBRSxvQ0FBb0M7WUFDMUMsSUFBSSxFQUFFLE9BQU87U0FDZCxFQUNEO1lBQ0UsSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQTtZQUNwQyxDQUFDO1NBQ0YsQ0FDRixDQUFBO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEVBQVUsRUFBRSxNQUFjLEVBQUUsUUFBZ0I7SUFFOUUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNsQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUVyRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLE9BQU87WUFDTCxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNkLENBQUE7S0FDRjtJQUVELE9BQU07QUFDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSG9teUFQSSB9IGZyb20gJy4vQVBJL2hvbXktYXBpLmpzJ1xuaW1wb3J0IHsgcmVuZGVyVG9hc3QgfSBmcm9tICcuL2xpYi5qcydcbmltcG9ydCB7IEZsYXRSZW50U2RrIH0gZnJvbSAnLi9TREsvZmxhdC1yZW50LXNkay5qcydcbmltcG9ydCB7IGdldFNlYXJjaEZvcm1EYXRhIH0gZnJvbSAnLi9zZWFyY2gtZm9ybS5qcydcbmltcG9ydCB7IElTb3VyY2UgfSBmcm9tICcuL3NvdXJjZXMuanMnXG5pbXBvcnQgeyBTZWFyY2hGb3JtSWQsIFRvQm9va0lkUHJlZml4ICB9IGZyb20gJy4vdHlwZXMvdHlwZXMuanMnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0b0Jvb2soZXZlbnQ6IEV2ZW50LCBzb3VyY2VzOiBJU291cmNlW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHtcblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldFxuXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHJldHVyblxuXG4gICAgY29uc3QgdGFyZ2V0SWQgPSB0YXJnZXQuaWRcbiAgICBjb25zdCBwcmVmaXhJZDogVG9Cb29rSWRQcmVmaXggPSAndG8tYm9vay0nXG5cbiAgICBjb25zdCB7IHNvdXJjZTogc291cmNlTmFtZSwgaWQ6IHBsYWNlSWQgfSA9IGdldENsZWFuSWRBbmRTb3VyY2UodGFyZ2V0SWQsIHByZWZpeElkLCAnXycpXG5cbiAgICBpZiAoc291cmNlTmFtZSA9PSBudWxsIHx8IHBsYWNlSWQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlkOiAke3RhcmdldElkfWApXG4gICAgfVxuXG4gICAgY29uc3QgZnJvbUlkOiBTZWFyY2hGb3JtSWQgPSAnc2VhcmNoLWZvcm0nXG4gICAgY29uc3QgeyBjaGVja0luLCBjaGVja091dCB9ID0gZ2V0U2VhcmNoRm9ybURhdGEoZnJvbUlkKVxuXG4gICAgY29uc3QgeyBhcGkgfSA9IHNvdXJjZXMuZmluZCgoc291cmNlKSA9PiBzb3VyY2UubmFtZSA9PT0gc291cmNlTmFtZSlcblxuICAgIGlmIChhcGkgaW5zdGFuY2VvZiBIb215QVBJKSB7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwaS5ib29rKHBsYWNlSWQsIGNoZWNrSW4sIGNoZWNrT3V0KVxuXG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHRocm93IHJlc3VsdFxuICAgIH1cblxuICAgIGlmIChhcGkgaW5zdGFuY2VvZiBGbGF0UmVudFNkaykge1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGkuYm9vayhcbiAgICAgICAgcGxhY2VJZCxcbiAgICAgICAgbmV3IERhdGUoY2hlY2tJbiksXG4gICAgICAgIG5ldyBEYXRlKGNoZWNrT3V0KSxcbiAgICAgIClcblxuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyByZXN1bHRcbiAgICB9XG5cbiAgICByZW5kZXJUb2FzdChcbiAgICAgIHtcbiAgICAgICAgdGV4dDogJ9CR0YDQvtC90LjRgNC+0LLQsNC90LjQtSDQv9GA0L7RiNC70L4g0YPRgdC/0LXRiNC90L4uJyxcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ09rJyxcbiAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfQo9Cy0LXQtNC+0LzQu9C10L3QuNC1INC30LDQutGA0YvRgtC+JylcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvci5tZXNzYWdlKVxuXG4gICAgcmVuZGVyVG9hc3QoXG4gICAgICB7XG4gICAgICAgIHRleHQ6ICfQn9GA0L7QuNC30L7RiNC70LAg0L7RiNC40LHQutCwINC/0YDQuCDQsdGA0L7QvdC40YDQvtCy0LDQvdC40LguJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdPaycsXG4gICAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn0KPQstC10LTQvtC80LvQtdC90LjQtSDQt9Cw0LrRgNGL0YLQvicpXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGVhbklkQW5kU291cmNlKGlkOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nLCBzcGxpdHRlcjogc3RyaW5nKTogSUlkQW5kU291cmNlIHwgbnVsbCB7XG5cbiAgY29uc3QgcHJlZml4TGVuZ3RoID0gcHJlZml4Lmxlbmd0aFxuICBjb25zdCByZXN1bHQgPSBpZC5zbGljZShwcmVmaXhMZW5ndGgpLnNwbGl0KHNwbGl0dGVyKVxuXG4gIGlmIChyZXN1bHQubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogcmVzdWx0WzBdLFxuICAgICAgaWQ6IHJlc3VsdFsxXSxcbiAgICB9XG4gIH1cblxuICByZXR1cm5cbn1cblxuaW50ZXJmYWNlIElJZEFuZFNvdXJjZSB7XG4gIHNvdXJjZTogc3RyaW5nXG4gIGlkOiBzdHJpbmdcbn1cbiJdfQ==